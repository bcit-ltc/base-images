name: Docker Image CI for GHCR

on:
  push:

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GA_TOKEN }}
      - name: Build and push the image
        run: |
          docker build . --tag ghcr.io/bcit-ltc/semantic-release:gitlab-original
          docker push ghcr.io/bcit-ltc/semantic-release:gitlab-original



  # build-and-push-app-image:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write
  #   steps:

  #     - uses: actions/checkout@v4

  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - uses: docker/setup-buildx-action@v3

  #     - name: Generate container metadata
  #       id: meta
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       env:
  #         DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
  #       with:
  #         flavor: |
  #           latest=true

  #     - uses: docker/build-push-action@v6
  #       id: build
  #       env:
  #         DOCKER_BUILD_RECORD_UPLOAD: false
  #         DOCKER_BUILD_SUMMARY: false
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         annotations: ${{ steps.meta.outputs.annotations }}
  #         provenance: true    # or could use `attest-build-provenance`` step below
  #         sbom: false
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     # Sign images to ensure authenticity
  #     - uses: sigstore/cosign-installer@v3

  #     - name: Cosign sign (keyless, by digest)
  #       env:
  #         DIGEST: ${{ steps.build.outputs.digest }}
  #       run: cosign sign --yes "${IMAGE}@${DIGEST}"
